// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PlantDiseaseX.Repository.Data;

#nullable disable

namespace PlantDiseaseX.Repository.Data.Migrations
{
    [DbContext(typeof(PlantContext))]
    partial class PlantContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.29")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("PlantDiseaseX.Core.Entities.ContactUs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ContactUs", (string)null);
                });

            modelBuilder.Entity("plantdiseasex.core.entities.corndisease", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("additionalinfo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("appropriatetreatment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("controlmethods")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("corndiseasepicture1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("corndiseasepicture2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("corndiseasepicture3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("diagnostictests")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("economicimpact")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("environmentalconditions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("geographicdistribution")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("hostplants")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("management")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("pathogentype")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("prevention")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("reasons")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("relateddiseases")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("researchreferences")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("riskfactors")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("symptoms")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("corndiseases", (string)null);
                });

            modelBuilder.Entity("PlantDiseaseX.Core.Entities.NewsArticle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NewsPicture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("NewsArticles", (string)null);
                });

            modelBuilder.Entity("PlantDiseaseX.Core.Entities.Plant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GeneralUse")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MedicalUse")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PictureUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PlantCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("PlantSeasonId")
                        .HasColumnType("int");

                    b.Property<string>("Properties")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Warnings")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("diseases")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("season")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("treatment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PlantCategoryId");

                    b.HasIndex("PlantSeasonId");

                    b.ToTable("Plants", (string)null);
                });

            modelBuilder.Entity("PlantDiseaseX.Core.Entities.Plantcategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("PlantCategories", (string)null);
                });

            modelBuilder.Entity("PlantDiseaseX.Core.Entities.Season", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("PlantSeasons", (string)null);
                });

            modelBuilder.Entity("PlantDiseaseX.Core.Entities.Plant", b =>
                {
                    b.HasOne("PlantDiseaseX.Core.Entities.Plantcategory", "PlantCategory")
                        .WithMany()
                        .HasForeignKey("PlantCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlantDiseaseX.Core.Entities.Season", "PlantSeason")
                        .WithMany()
                        .HasForeignKey("PlantSeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlantCategory");

                    b.Navigation("PlantSeason");
                });
#pragma warning restore 612, 618
        }
    }
}
